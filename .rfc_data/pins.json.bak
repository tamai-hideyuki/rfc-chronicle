import json
from pathlib import Path
import click
from filelock import FileLock

# デフォルトピンファイルパス
PINS_FILE = Path(".rfc_data/pins.json")
LOCK_SUFFIX = ".lock"


def ensure_data_dir(path: Path):
path.parent.mkdir(parents=True, exist_ok=True)


def load_pins(path: Path = PINS_FILE) -> list[int]:
ensure_data_dir(path)
if not path.exists():
save_pins([], path)
lock = FileLock(str(path) + LOCK_SUFFIX)
with lock:
try:
data = json.loads(path.read_text(encoding="utf-8"))
# 整数に変換
return [int(r) for r in data]
except json.JSONDecodeError:
backup = path.with_suffix(path.suffix + ".bak")
path.rename(backup)
save_pins([], path)
return []


def save_pins(pins: list[int], path: Path = PINS_FILE) -> None:
ensure_data_dir(path)
lock = FileLock(str(path) + LOCK_SUFFIX)
with lock:
path.write_text(json.dumps(pins, indent=2, ensure_ascii=False), encoding="utf-8")


@click.group()
def cli():
"""RFC-chronicle CLI"""
pass


@cli.command()
@click.argument('rfc', type=int)
def pin(rfc: int):
"Pin an RFC"
pins = load_pins()
if rfc in pins:
click.echo(f"RFC {rfc} はすでにピンされています。")
return
pins.append(rfc)
save_pins(pins)
click.echo(f"RFC {rfc} をピンしました。📌")


@cli.command()
@click.argument('rfc', type=int)
def unpin(rfc: int):
"Unpin an RFC"
pins = load_pins()
if rfc not in pins:
click.echo(f"RFC {rfc} はピンされていません。")
return
pins.remove(rfc)
save_pins(pins)
click.echo(f"RFC {rfc} のピンを解除しました。❌")


@cli.command(name='list')
@click.option('--pins-only', is_flag=True, help='ピン済みのみ表示')
@click.option('--show-pins', is_flag=True, help='全RFC表示にピンマークを付与')
@click.argument('other_args', nargs=-1)
def list_rfc(pins_only: bool, show_pins: bool, other_args):
"List RFCs, with pinned markers"
# 既存のリスト機能を呼び出しつつ、ピン処理を追加
pins = load_pins()
# 仮に fetch_metadata_list を呼ぶ
from rfc_chronicle.fetch_rfc import fetch_metadata_list
all_items = fetch_metadata_list(*other_args)

def format_item(item):
mark = '📌' if item.number in pins else '   '
return f"{mark} RFC{item.number:03d}  {item.title}"

filtered = all_items
if pins_only:
filtered = [i for i in all_items if i.number in pins]

# ピン済みを先頭、番号順
sorted_items = sorted(filtered, key=lambda i: (i.number not in pins, i.number))

for item in sorted_items:
line = format_item(item) if show_pins or pins_only else item.summary_line()
click.echo(line)
